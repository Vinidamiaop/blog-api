// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  MEMBER
  ADMIN
}

model User {
  id           Int              @id @default(autoincrement())
  firstName    String           @db.VarChar(255)
  lastName     String           @db.VarChar(255)
  role         Role             @default(MEMBER)
  email        String           @unique @db.VarChar(50)
  passwordHash String           @db.VarChar(64)
  profile      Profile?
  picture      ProfilePicture[]
  posts        Post[]
  userComments PostComment[]
  images       Images[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model ProfilePicture {
  id           Int      @id @default(autoincrement())
  originalname String   @db.VarChar(100)
  filename     String   @db.VarChar(100)
  url          String   @db.VarChar(100)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
}

model Post {
  id            Int            @id @default(autoincrement())
  title         String         @unique @db.VarChar(100)
  metaTitle     String?        @db.VarChar(140)
  slug          String         @unique @db.VarChar(100)
  description   String?        @db.VarChar(255)
  featuredImage String?        @db.VarChar(100)
  postMeta      PostMeta[]
  comments      PostComment[]
  postTags      PostTag[]
  postCategory  PostCategory[]
  content       String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  published     Boolean        @default(false)
  author        User           @relation(fields: [authorId], references: [id])
  authorId      Int
}

model Images {
  id           Int        @id @default(autoincrement())
  title        String?    @db.VarChar(100)
  description  String?    @db.VarChar(255)
  originalname String     @db.VarChar(100)
  filename     String     @db.VarChar(100)
  url          ImagesUrl?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  author       User       @relation(fields: [authorId], references: [id])
  authorId     Int
}

model ImagesUrl {
  id       Int     @id @default(autoincrement())
  original String  @db.VarChar(100)
  avg      String  @db.VarChar(100)
  small    String  @db.VarChar(100)
  image    Images? @relation(fields: [imageId], references: [id])
  imageId  Int
}

model PostMeta {
  id      Int     @id @default(autoincrement())
  key     String? @db.VarChar(50)
  content String?
  post    Post?   @relation(fields: [postId], references: [id])
  postId  Int

}

model PostComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  postId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  authorId  Int
  author    User?    @relation(fields: [authorId], references: [id])
}

model Tag {
  id        Int       @id @default(autoincrement())
  title     String    @unique @db.VarChar(75)
  metaTitle String?   @db.VarChar(100)
  slug      String    @unique @db.VarChar(100)
  content   String?
  postTag   PostTag[]
}

model PostTag {
  post   Post? @relation(fields: [postId], references: [id])
  postId Int
  tag    Tag?  @relation(fields: [tagId], references: [id])
  tagId  Int

  @@id([postId, tagId])
}

model Category {
  id           Int            @id @default(autoincrement())
  title        String         @unique @db.VarChar(75)
  metaTitle    String?        @db.VarChar(100)
  slug         String         @unique @db.VarChar(100)
  content      String?
  postCategory PostCategory[]
}

model PostCategory {
  post       Post?     @relation(fields: [postId], references: [id])
  postId     Int
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([postId, categoryId])
}
